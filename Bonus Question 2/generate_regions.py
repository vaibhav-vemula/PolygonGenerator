# -*- coding: utf-8 -*-
"""generate regions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10_goCgycDtAEHgk2BZ1zeujLpsl0nz6h

***K-MEANS CLUSTERING***

#FOR RANDOM GENERATION OF POINTS
"""

import math, random
from shapely.geometry import Point
from shapely.geometry.polygon import Polygon
import pandas as pd
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

def generatePolygon( ctrX, ctrY, aveRadius, irregularity, spikeyness, numVerts ) :
    irregularity =  irregularity * 2*math.pi / numVerts
    spikeyness = spikeyness * aveRadius
    # generate n angle steps
    angleSteps = []
    lower = (2*math.pi / numVerts) - irregularity
    upper = (2*math.pi / numVerts) + irregularity
    sum = 0
    for i in range(numVerts) :
        tmp = random.uniform(lower, upper)
        angleSteps.append( tmp )
        sum = sum + tmp
    # normalize the steps so that point 0 and point n+1 are the same
    k = sum / (2*math.pi)
    for i in range(numVerts) :
        angleSteps[i] = angleSteps[i] / k
    # now generate the points
    points = []
    angle = random.uniform(0, 2*math.pi)
    for i in range(numVerts) :
        r_i =  random.gauss(aveRadius, spikeyness)
        x =  ctrX + r_i*math.cos(angle)
        y = ctrY + r_i*math.sin(angle)
        points.append( (int(x),int(y)) )
        angle = angle + angleSteps[i]

    return points

verts = generatePolygon( ctrX=100, ctrY=100, aveRadius=200, irregularity=1, spikeyness=0.11, numVerts=50 )
pa = Polygon(verts)

"""#PRE-DEFINED POINTS FROM STATES"""

#%%
"""for states"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

import json
import random

f = open('states.json')
data = json.load(f)

a = data['New Jersey']['Coordinates']
x1=[]
y1 = []
output = []
for i in a:
    output.append((i['lat'], i['lng']))
    x1.append(i['lat'])
    y1.append(i['lng'])
plt.scatter(x1,y1, c='b')
plt.show()

from shapely.geometry import Polygon, Point
def random_points_within(poly, num_points):
    min_x, min_y, max_x, max_y = poly.bounds

    points = []

    while len(points) < num_points:
        random_point = Point([random.uniform(min_x, max_x), random.uniform(min_y, max_y)])
        if (random_point.within(poly)):
            points.append(random_point)

    return points

#change 'output' to 'verts' for points randomly generated
p = random_points_within(Polygon(output), 50000)    #for states
#p = random_points_within(Polygon(verts), 50000)    #for random regions
points=[]
x_point = []
y_point = []
for i in p:
    points.append([i.x, i.y])
    x_point.append(i.x)
    y_point.append(i.y)
points = np.array(points)

plt.scatter(x_point,y_point, c='b')
plt.show()

X=points
n_regions = 20
kmeans = KMeans(n_clusters = n_regions, init = 'k-means++', random_state = 0)
y_kmeans = kmeans.fit_predict(X)

colors = ['yellowgreen','khaki','cornflowerblue','darkgrey']
regions = ['Grasslands','Cultivated Land','Water Bodies','Constructed Buildings']
a = [0]*4
for i in range(4):
  print('Enter Percentage coverage of ', regions[i],": ")
  a[i] = int(input())

ind = 0
for i in range(4):
  r = (a[i]*n_regions)//100
  for j in range(r):
    if(j==0):
      plt.scatter(X[y_kmeans == ind, 0], X[y_kmeans == ind, 1], s = 100, c = colors[i], label=regions[i])
    else:
      plt.scatter(X[y_kmeans == ind, 0], X[y_kmeans == ind, 1], s = 100, c = colors[i])
    a[i]-=1
    ind+=1
plt.legend(bbox_to_anchor = (1.05, 0.6))
plt.show()

